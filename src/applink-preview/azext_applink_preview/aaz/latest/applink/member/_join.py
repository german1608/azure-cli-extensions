# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "applink member join",
    is_experimental=True,
)
class Join(AAZCommand):
    """Join a kubernetes cluster to an AppLink

    :example: Add an AKS cluster to an AppLink
        az applink member join --resource-group test_rg --applink-name applink-test-01 --member-name member-01 --cluster-type AKS --member-resource-id /subscriptions/bc7e0da9-5e4c-4a91-9252-9658837006cf/resourcegroups/applink-rg/providers/Microsoft.ContainerService/managedClusters/applink-member1 --upgrade-mode FullyManaged --release-channel Stable --metrics-state Enabled --logs-state Enabled --traces-state Disabled --managed-identity /subscriptions/11809CA1-E126-4017-945E-AA795CD5C5A9/resourceGroups/test_rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-identity --tags "{key2913:test_tag}" --member-location westus2
    """

    _aaz_info = {
        "version": "2025-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.applink/applinks/{}/applinkmembers/{}", "2025-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.member_name = AAZStrArg(
            options=["--member-name"],
            help="The name of the AppLinkMember",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.applink_name = AAZStrArg(
            options=["--applink-name"],
            help="The name of the AppLink",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of resource group",
            required=True,
        )

        # define Arg Group "FullyManagedUpgradeProfile"

        _args_schema = cls._args_schema
        _args_schema.release_channel = AAZStrArg(
            options=["--release-channel"],
            arg_group="FullyManagedUpgradeProfile",
            help="Release channel",
            default="Stable",
            enum={"Rapid": "Rapid", "Stable": "Stable"},
            enum_support_extension=True,
        )

        # define Arg Group "Metadata"

        _args_schema = cls._args_schema
        _args_schema.member_resource_id = AAZStrArg(
            options=["--member-resource-id"],
            arg_group="Metadata",
            help="Resource ID",
        )

        # define Arg Group "ObservabilitySettings"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.upgrade_mode = AAZStrArg(
            options=["--upgrade-mode"],
            arg_group="Properties",
            help="Upgrade mode",
            default="FullyManaged",
            enum={"FullyManaged": "FullyManaged", "SelfManaged": "SelfManaged"},
            enum_support_extension=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.member_location = AAZResourceLocationArg(
            options=["--member-location"],
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "SelfManagedUpgradeProfile"

        _args_schema = cls._args_schema
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="SelfManagedUpgradeProfile",
            help="Istio version",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.AppLinkMembersCreateOrReplace(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AppLinkMembersCreateOrReplace(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppLink/appLinks/{appLinkName}/appLinkMembers/{appLinkMemberName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "appLinkMemberName", self.ctx.args.member_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "appLinkName", self.ctx.args.applink_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".member_location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("fullyManagedUpgradeProfile", AAZObjectType)
                properties.set_prop("metadata", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("mode", AAZStrType, ".upgrade_mode")
                properties.set_prop("observabilitySettings", AAZObjectType)
                properties.set_prop("selfManagedUpgradeProfile", AAZObjectType)

            fully_managed_upgrade_profile = _builder.get(".properties.fullyManagedUpgradeProfile")
            if fully_managed_upgrade_profile is not None:
                fully_managed_upgrade_profile.set_prop("releaseChannel", AAZStrType, ".release_channel", typ_kwargs={"flags": {"required": True}})

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_prop("resourceId", AAZStrType, ".member_resource_id", typ_kwargs={"flags": {"required": True}})

            observability_settings = _builder.get(".properties.observabilitySettings")
            if observability_settings is not None:
                observability_settings.set_prop("logs", AAZObjectType)
                observability_settings.set_prop("metrics", AAZObjectType)
                observability_settings.set_prop("traces", AAZObjectType)

            self_managed_upgrade_profile = _builder.get(".properties.selfManagedUpgradeProfile")
            if self_managed_upgrade_profile is not None:
                self_managed_upgrade_profile.set_prop("version", AAZStrType, ".version", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.cluster_type = AAZStrType(
                serialized_name="clusterType",
            )
            properties.fully_managed_upgrade_profile = AAZObjectType(
                serialized_name="fullyManagedUpgradeProfile",
            )
            properties.metadata = AAZObjectType(
                flags={"required": True},
            )
            properties.mode = AAZStrType()
            properties.observability_settings = AAZObjectType(
                serialized_name="observabilitySettings",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.self_managed_upgrade_profile = AAZObjectType(
                serialized_name="selfManagedUpgradeProfile",
            )

            fully_managed_upgrade_profile = cls._schema_on_200_201.properties.fully_managed_upgrade_profile
            fully_managed_upgrade_profile.release_channel = AAZStrType(
                serialized_name="releaseChannel",
                flags={"required": True},
            )

            metadata = cls._schema_on_200_201.properties.metadata
            metadata.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )

            observability_settings = cls._schema_on_200_201.properties.observability_settings
            observability_settings.logs = AAZObjectType()
            observability_settings.managed_identity = AAZStrType(
                serialized_name="managedIdentity",
            )
            observability_settings.metrics = AAZObjectType()
            observability_settings.traces = AAZObjectType()

            logs = cls._schema_on_200_201.properties.observability_settings.logs
            logs.state = AAZStrType(
                flags={"required": True},
            )

            metrics = cls._schema_on_200_201.properties.observability_settings.metrics
            metrics.state = AAZStrType(
                flags={"required": True},
            )

            traces = cls._schema_on_200_201.properties.observability_settings.traces
            traces.state = AAZStrType(
                flags={"required": True},
            )

            self_managed_upgrade_profile = cls._schema_on_200_201.properties.self_managed_upgrade_profile
            self_managed_upgrade_profile.version = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _JoinHelper:
    """Helper class for Join"""


__all__ = ["Join"]
